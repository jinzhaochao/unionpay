package com.unionpay.support.serviceImpl;

import com.unionpay.common.util.ToolUtil;
import com.unionpay.services.model.ServerSuggestAndGiveLikeModel;
import com.unionpay.supervision.domain.OmUser;
import com.unionpay.support.dao.SupportInfoRepository;
import com.unionpay.support.model.AppointmentModel;
import com.unionpay.support.model.ExcelSupportInfo;
import com.unionpay.support.model.ServerDateTime;
import com.unionpay.support.model.SupportPage;
import com.unionpay.support.pojo.SupportInfo;
import com.unionpay.support.service.SupportInfoService;
import org.apache.xmlbeans.impl.piccolo.xml.EntityManager;
import org.hibernate.query.internal.NativeQueryImpl;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.Id;
import javax.persistence.Query;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * @Author: jinzhao
 * @Date: 2019/10/25 09:31
 * @Description:
 */
@Service
public class SupportInfoServiceImpl implements SupportInfoService{
    @Autowired
    private SupportInfoRepository supportInfoRepository;
    @Autowired
    private javax.persistence.EntityManager entityManager;

    @Override
    public SupportInfo selectById(Integer id) {
        SupportInfo supportInfo = supportInfoRepository.findSupportInfoById(id);
        return supportInfo;
    }

    @Override
    public void save(SupportInfo supportInfo) {
        supportInfoRepository.save(supportInfo);
    }


    @Override
    public List<SupportPage> selectSupportInfo(Integer page, Integer size, String appointmentName, Integer serverUserId, String serverUserName, String timeStart, String timeEnd, Integer status, String userId,Integer tabPage) {
        String sql = " select si.id,si.number,DATE_FORMAT(si.create_time ,'%Y-%m-%d %H:%i:%S') as createTime,si.appointment_name as appointmentName,si.appointment_connection as appointmentConnection,si.question_type as questionType,si.question_category as questionCategory,si.support_type as supportType,si.my_place as myPlace,si.place_detail as placeDetail,si.excepted_day as exceptedDay,si.excepted_time as exceptedTime,si.alternative_day as alternativeDay,si.alternative_time as alternativeTime,si.emp_id as empId,si.emp_name as empName,si.emp_dept_id as empDeptId,si.emp_dept_name as empDeptName,si.reply_id as replyId,si.reply_name as replyName,DATE_FORMAT(si.reply_time ,'%Y-%m-%d %H:%i:%S') as replyTime,si.server_userid as serverUserId,si.server_username as serverUserName,si.server_day as serverDay,si.server_time as serverTime,si.server_reason as serverReason,si.evaluate_type as evaluateType,si.status,si.evaluate_content as evaluateContent,DATE_FORMAT(si.evaluate_time ,'%Y-%m-%d %H:%i:%S') as evaluateTime,ss.office_phone as officePhone,if(si.status = '2',(if(si.evaluate_time is null,1,0)),0) as isevaluate,if(si.status < 2,1,0) as isrevoke from support_info si left join support_server_user ss on si.server_userid = ss.id where 1=1 ";
        if (tabPage == 1){
            sql += " and si.emp_id = '"+userId+"'  ";
        }
        if (tabPage == 2){
            sql += " and si.reply_id = '"+userId+"' ";
        }
        if (ToolUtil.isNotEmpty(status)){
            sql += " and si.status = '"+status+"' ";
        }
        if (ToolUtil.isNotEmpty(appointmentName)){
            sql += " and si.appointment_name like '%"+appointmentName+"%' ";
        }
        if (ToolUtil.isNotEmpty(serverUserId)){
            sql += " and si.server_userid = '"+serverUserId+"' ";
        }
        if (ToolUtil.isNotEmpty(serverUserName)){
            sql += " and si.server_username = '"+serverUserName+"' ";
        }
        if (ToolUtil.isNotEmpty(timeStart)){
            sql += " and si.server_day >= '"+timeStart+"' ";
        }
        if (ToolUtil.isNotEmpty(timeEnd)){
            sql += " and si.server_day <= '"+timeEnd+"' ";
        }
        sql += " order by si.create_time desc ";
        Query query = entityManager.createNativeQuery(sql);
        query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(SupportPage.class));
        query.setFirstResult((page - 1) * size);
        query.setMaxResults(size);
        List<SupportPage> list =  query.getResultList();
        for (SupportPage supportPage : list) {
            supportPage.setServerDateTime(supportPage.getServerDay()+" "+supportPage.getServerTime());
            supportPage.setIsEvaluate(Integer.parseInt(supportPage.getIsevaluate().toString()));
            supportPage.setIsRevoke(Integer.parseInt(supportPage.getIsrevoke().toString()));
        }
        return list;
    }

    @Override
    public Integer selectCount(String appointmentName, Integer serverUserId, String serverUserName, String timeStart, String timeEnd, Integer status, String userId,Integer tabPage) {
        String sql = " select si.id,si.number,DATE_FORMAT(si.create_time ,'%Y-%m-%d %H:%i:%S') as createTime,si.appointment_name as appointmentName,si.appointment_connection as appointmentConnection,si.question_type as questionType,si.question_category as questionCategory,si.support_type as supportType,si.my_place as myPlace,si.place_detail as placeDetail,si.excepted_day as exceptedDay,si.excepted_time as exceptedTime,si.alternative_day as alternativeDay,si.alternative_time as alternativeTime,si.emp_id as empId,si.emp_name as empName,si.emp_dept_id as empDeptId,si.emp_dept_name as empDeptName,si.reply_id as replyId,si.reply_name as replyName,DATE_FORMAT(si.reply_time ,'%Y-%m-%d %H:%i:%S') as replyTime,si.server_userid as serverUserId,si.server_username as serverUserName,si.server_day as serverDay,si.server_time as serverTime,si.server_reason as serverReason,si.evaluate_type as evaluateType,si.status,si.evaluate_content as evaluateContent,DATE_FORMAT(si.evaluate_time ,'%Y-%m-%d %H:%i:%S') as evaluateTime,ss.office_phone as officePhone,if(si.status = '2',(if(si.evaluate_time is null,1,0)),0) as isevaluate,if(si.status < 2,1,0) as isrevoke from support_info si left join support_server_user ss on si.server_userid = ss.id where 1=1 ";
        if (tabPage == 1){
            sql += " and si.emp_id = '"+userId+"'  ";
        }
        if (tabPage == 2){
            sql += " and si.reply_id = '"+userId+"' ";
        }
        if (ToolUtil.isNotEmpty(status)){
            sql += " and si.status = '"+status+"' ";
        }
        if (ToolUtil.isNotEmpty(appointmentName)){
            sql += " and si.appointment_name like '%"+appointmentName+"%' ";
        }
        if (ToolUtil.isNotEmpty(serverUserId)){
            sql += " and si.server_userid = '"+serverUserId+"' ";
        }
        if (ToolUtil.isNotEmpty(serverUserName)){
            sql += " and si.server_username = '"+serverUserName+"' ";
        }
        if (ToolUtil.isNotEmpty(timeStart)){
            sql += " and si.server_day >= '"+timeStart+"' ";
        }
        if (ToolUtil.isNotEmpty(timeEnd)){
            sql += " and si.server_day <= '"+timeEnd+"' ";
        }
        sql += " order by si.create_time desc ";
        Query query = entityManager.createNativeQuery(sql);
        query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(SupportPage.class));
        List<SupportPage> list =  query.getResultList();
        for (SupportPage supportPage : list) {
            supportPage.setServerDateTime(supportPage.getServerDay()+" "+supportPage.getServerTime());
            supportPage.setIsEvaluate(Integer.parseInt(supportPage.getIsevaluate().toString()));
            supportPage.setIsRevoke(Integer.parseInt(supportPage.getIsrevoke().toString()));
        }
        return list.size();
    }

    @Override
    public String selectAllCount() {
        String number = supportInfoRepository.select();
        return number;
    }

    @Override
    public ServerDateTime selectByMyplaceAndDatetimme(String myPlace,String exceptedTime, String dateTime) {
        String sql = " select count(*) as countNum,si.server_time as serverTime from support_info si where 1=1 ";
        if (ToolUtil.isNotEmpty(myPlace)){
            sql += " and si.my_place = :myPlace ";
        }
        if (ToolUtil.isNotEmpty(dateTime)){
            sql += " and si.server_day = :dateTime ";
        }
        if (ToolUtil.isNotEmpty(exceptedTime)){
            sql += " and si.server_time = :exceptedTime ";
        }
        Query query = entityManager.createNativeQuery(sql);
        if (ToolUtil.isNotEmpty(myPlace)){
            query.setParameter("myPlace",myPlace);
        }
        if (ToolUtil.isNotEmpty(dateTime)){
            query.setParameter("dateTime",dateTime);
        }
        if (ToolUtil.isNotEmpty(exceptedTime)){
            query.setParameter("exceptedTime",exceptedTime);
        }

        query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(ServerDateTime.class));
        ServerDateTime serverDateTime = (ServerDateTime) query.getSingleResult();
        serverDateTime.setCount(Integer.parseInt(serverDateTime.getCountNum().toString()));
        return serverDateTime;
    }

    @Override
    public List<ExcelSupportInfo> selectInfo(String timeStart, String timeEnd, Integer status, Integer serverUserId, String serverUserName, String ids) {
        List<SupportInfo> list = new ArrayList<>();
        List<ExcelSupportInfo> excelSupportInfoArrayList = new ArrayList<>();
        try {

            String sql = " select si.id,si.number,si.appointment_name as appointmentName,si.status,si.server_username as serverUserName,si.appointment_connection as appointmentConnection,si.question_type as questionType,si.support_type as supportType,si.server_day as serverDay,si.server_time as serverTime,si.my_place as myPlace,si.place_detail as placeDetail from support_info  si where 1=1 ";
            if (ToolUtil.isNotEmpty(ids)) {
                String[] unid = ids.split(",");
                sql += " and si.id in (";
                for (int i = 0; i < unid.length; i++) {
                    if (ToolUtil.isEmpty(unid[i])) {
                        continue;
                    }
                    if (i < unid.length - 1) {
                        sql += "'" + unid[i] + "',";
                    } else {
                        sql += "'" + unid[i] + "')";
                    }
                }
            }
            if (ToolUtil.isNotEmpty(status)) {
                sql += " and si.status = '" + status + "' ";
            }
            if (ToolUtil.isNotEmpty(timeStart)) {
                sql += " and si.server_day >= '" + timeStart + "' ";
            }
            if (ToolUtil.isNotEmpty(timeEnd)) {
                sql += " and si.server_day <= '" + timeEnd + "' ";
            }
            if (ToolUtil.isNotEmpty(serverUserId)) {
                sql += " and si.server_userid = '" + serverUserId + "' ";
            }
            if (ToolUtil.isNotEmpty(serverUserName)) {
                sql += " and si.server_username = '" + serverUserName + "' ";
            }
            sql += " order by si.id desc ";
            Query query = entityManager.createNativeQuery(sql);
            query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(SupportInfo.class));
             list = query.getResultList();
            for (SupportInfo supportInfo : list) {
                ExcelSupportInfo excelSupportInfo = new ExcelSupportInfo();

                //受理状态
                if (ToolUtil.isNotEmpty(supportInfo.getStatus())) {
                    if (supportInfo.getStatus() == 0) {
                        excelSupportInfo.setStatus("未处理");
                    } else if (supportInfo.getStatus() == 1) {
                        excelSupportInfo.setStatus("待服务");
                    } else if (supportInfo.getStatus() == 2) {
                        excelSupportInfo.setStatus("已完成");
                    } else if (supportInfo.getStatus() == 3) {
                        excelSupportInfo.setStatus("已撤销");
                    }
                }
                //设备类型
                if (ToolUtil.isNotEmpty(supportInfo.getQuestionType())) {
                    if (supportInfo.getQuestionType() == 1) {
                        excelSupportInfo.setQuestionType("云主机");
                    } else if (supportInfo.getQuestionType() == 2) {
                        excelSupportInfo.setQuestionType("台式机");
                    } else if (supportInfo.getQuestionType() == 3) {
                        excelSupportInfo.setQuestionType("笔记本");
                    } else if (supportInfo.getQuestionType() == 4) {
                        excelSupportInfo.setQuestionType("华为IP话机");
                    } else if (supportInfo.getQuestionType() == 5) {
                        excelSupportInfo.setQuestionType("手机/IPAD");
                    } else if (supportInfo.getQuestionType() == 6) {
                        excelSupportInfo.setQuestionType("打印机");
                    } else if (supportInfo.getQuestionType() == 7) {
                        excelSupportInfo.setQuestionType("其他");
                    }
                }
                //支持类型
                if (ToolUtil.isNotEmpty(supportInfo.getSupportType())) {
                    if (supportInfo.getSupportType() == 1) {
                        excelSupportInfo.setSupportType("电话支持");
                    } else if (supportInfo.getSupportType() == 2) {
                        excelSupportInfo.setSupportType("现场支持");
                    }
                }
                //服务时间
                if (ToolUtil.isNotEmpty(supportInfo.getServerDay()) && ToolUtil.isNotEmpty(supportInfo.getServerTime())){
                    excelSupportInfo.setServerDateTime(supportInfo.getServerDay()+" "+supportInfo.getServerTime());
                }
                //预约编号
                excelSupportInfo.setNumber(supportInfo.getNumber());
                //预约人
                excelSupportInfo.setAppointmentName(supportInfo.getAppointmentName());
                //服务人
                excelSupportInfo.setServerUserName(supportInfo.getServerUserName());
                //联系电话
                excelSupportInfo.setOfficePhone(supportInfo.getAppointmentConnection());
                //地点
                excelSupportInfo.setMyPlace(supportInfo.getMyPlace());
                //详细地点
                excelSupportInfo.setPlaceDetail(supportInfo.getPlaceDetail());
                excelSupportInfoArrayList.add(excelSupportInfo);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return excelSupportInfoArrayList;
    }

    @Override
    public void add(SupportInfo supportInfo, OmUser omUser) {
        SupportInfo info = supportInfoRepository.findSupportInfoById(supportInfo.getId());
        info.setReplyId(omUser.getEmpid());
        //受理人name
        info.setReplyName(omUser.getEmpname());
        //受理时间
        info.setReplyTime(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
        //服务人员id
        info.setServerUserId(supportInfo.getServerUserId());
        //服务人员名字
        info.setServerUserName(supportInfo.getServerUserName());
        //服务日期
        info.setServerDay(supportInfo.getServerDay());
        //服务时间段
        info.setServerTime(supportInfo.getServerTime());
        //支持类型
        info.setSupportType(supportInfo.getSupportType());
        //回复原因
        info.setServerReason(supportInfo.getServerReason());
        //受理状态  待服务
        info.setStatus(1);
        supportInfoRepository.save(info);
        //TODO 已接受预约告知预约人 (你的预约成功啦，xxx将在10-25（周五）9:00-10:00为您服务)
    }

    @Override
    public void update(Integer id) {
        SupportInfo info = supportInfoRepository.findSupportInfoById(id);
        //受理状态  已完成
        info.setStatus(2);
        supportInfoRepository.save(info);
        //TODO 已完成预约 告知预约人评价  (您发起的由xxx处理的预约服务已完成，请及时进行评价哦)

    }

    @Override
    public SupportPage selectAll(Integer id) {
        String sql = " select si.id,si.number,DATE_FORMAT(si.create_time ,'%Y-%m-%d %H:%i:%S') as createTime,si.appointment_name as appointmentName,si.appointment_connection as appointmentConnection,si.question_type as questionType,si.question_category as questionCategory,si.support_type as supportType,si.my_place as myPlace,si.place_detail as placeDetail,si.excepted_day as exceptedDay,si.excepted_time as exceptedTime,si.alternative_day as alternativeDay,si.alternative_time as alternativeTime,si.emp_id as empId,si.emp_name as empName,si.emp_dept_id as empDeptId,si.emp_dept_name as empDeptName,si.reply_id as replyId,si.reply_name as replyName,DATE_FORMAT(si.reply_time ,'%Y-%m-%d %H:%i:%S') as replyTime,si.server_userid as serverUserId,si.server_username as serverUserName,si.server_day as serverDay,si.server_time as serverTime,si.server_reason as serverReason,si.evaluate_type as evaluateType,si.status,si.evaluate_content as evaluateContent,DATE_FORMAT(si.evaluate_time ,'%Y-%m-%d %H:%i:%S') as evaluateTime,ss.office_phone as officePhone,if(si.status = '2',(if(si.evaluate_time is null,1,0)),0) as isevaluate,if(si.status < 2,1,0) as isrevoke from support_info si left join support_server_user ss on si.server_userid = ss.id where si.id = :id ";
        Query query = entityManager.createNativeQuery(sql);
        if (ToolUtil.isNotEmpty(id)){
            query.setParameter("id",id);
        }
        query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(SupportPage.class));
        SupportPage supportPage = (SupportPage) query.getSingleResult();
        supportPage.setServerDateTime(supportPage.getServerDay()+" "+supportPage.getServerTime());
        supportPage.setIsEvaluate(Integer.parseInt(supportPage.getIsevaluate().toString()));
        supportPage.setIsRevoke(Integer.parseInt(supportPage.getIsrevoke().toString()));
        return supportPage;
    }
}
