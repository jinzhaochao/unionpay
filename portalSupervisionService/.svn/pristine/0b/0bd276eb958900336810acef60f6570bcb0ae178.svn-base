package com.unionpay.services.service;

import com.unionpay.common.util.ToolUtil;
import com.unionpay.services.model.*;
import com.unionpay.services.repository.ServerGiveLikeRepository;
import com.unionpay.services.repository.ServerSuggestRepository;
import com.unionpay.supervision.dao.OMUserRepository;
import org.hibernate.query.internal.NativeQueryImpl;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * @Author: 翟俊鹏
 * @Date: 2019/3/20/020 14:26
 * @Description:
 */
@Service
public class ServerSuggestServiceImpl implements ServerSuggestService {

    @PersistenceContext
    private EntityManager em;

    @Autowired
    private ServerSuggestRepository serverSuggestRepository;

    @Autowired
    private ServerGiveLikeRepository serverGiveLikeRepository;

    @Autowired
    private OMUserRepository omUserRepository;

    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, timeout = 36000, rollbackFor = Exception.class)
    public ServerSuggest add(ServerSuggest serverSuggest) {
        return serverSuggestRepository.save(serverSuggest);
    }

    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, timeout = 36000, rollbackFor = Exception.class)
    public void delete(Integer id) {
        serverSuggestRepository.deleteById(id);
    }

    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, timeout = 36000, rollbackFor = Exception.class)
    public ServerSuggest update(ServerSuggest serverSuggest) {
        return serverSuggestRepository.saveAndFlush(serverSuggest);
    }

    public ServerSuggest get(Integer id) {
        return serverSuggestRepository.getOne(id);
    }

    public List<ServerSuggest> getAll() {
        return serverSuggestRepository.findAll();
    }

    public Page<ServerSuggest> getPage(Integer page, Integer rows) {
        Pageable pageable = new PageRequest(page - 1, rows);
        return serverSuggestRepository.findAll(pageable);
    }

    /**
     * 服务需求反馈信息查询与分页
     *
     * @param orgId
     * @param status
     * @return
     * @author lishuang
     * @date 2019-03-14
     */
    public List<ServerSuggestModel> SelectAllSuggest(Integer page, Integer size, Integer orgId, Integer status) {
        String jpql = "SELECT ss.id,ss.title,ss.emp_id,ss.emp_dept,ss.status,DATE_FORMAT(ss.createtime,'%Y-%m-%d %H:%i:%S') as createtime,ss.server_describe,ss.other_suggest,\n" +
                " ss.reply_reason,ss.emp_dept_id,ss.emp_org_id,ss.emp_name,ss.reply_id,DATE_FORMAT(ss.reply_time,'%Y-%m-%d %H:%i:%S') reply_time\n" +
                " FROM server_suggest ss WHERE 1=1";
        if (ToolUtil.isNotEmpty(orgId)) {
            jpql += " and (ss.emp_dept_id = :orgId or ss.emp_org_id = :orgId)";
        }
        if (ToolUtil.isNotEmpty(status)) {
            jpql += " and ss.status = :status";
        }
        jpql += " order by ss.createtime desc";
        Query query = em.createNativeQuery(jpql);
        if (ToolUtil.isNotEmpty(orgId)) {
            query.setParameter("orgId", orgId);
        }
        if (ToolUtil.isNotEmpty(status)) {
            query.setParameter("status", status);
        }

        query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(ServerSuggestModel.class));
        List<ServerSuggestModel> serverSuggests1 = query.getResultList();
        query.setFirstResult((page - 1) * size);
        query.setMaxResults(size);
        List<ServerSuggestModel> serverSuggests = query.getResultList();
        /*JSONObject json = new JSONObject();
        json.put("data", serverSuggests);
        json.put("total", serverSuggests1.size());*/
        return serverSuggests;
    }

    @Override
    public Integer getCount(Integer page, Integer size, Integer orgId, Integer status) {
        int count = 0;
        String jpql = "SELECT ss.id,ss.title,ss.emp_id,ss.emp_dept,ss.status,DATE_FORMAT(ss.createtime,'%Y-%m-%d %H:%i:%S') as createtime,ss.server_describe,ss.other_suggest,\n" +
                " ss.reply_reason,ss.emp_dept_id,ss.emp_org_id,ss.emp_name,ss.reply_id,DATE_FORMAT(ss.reply_time,'%Y-%m-%d %H:%i:%S') reply_time\n" +
                " FROM server_suggest ss WHERE 1=1";
        if (ToolUtil.isNotEmpty(orgId)) {
            jpql += " and (ss.emp_dept_id = :orgId or ss.emp_org_id = :orgId)";
        }
        if (ToolUtil.isNotEmpty(status)) {
            jpql += " and ss.status = :status";
        }
        jpql += " order by ss.createtime desc";
        Query query = em.createNativeQuery(jpql);
        if (ToolUtil.isNotEmpty(orgId)) {
            query.setParameter("orgId", orgId);
        }
        if (ToolUtil.isNotEmpty(status)) {
            query.setParameter("status", status);
        }
        query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(ServerSuggestModel.class));
        List<ServerSuggestModel> serverSuggests1 = query.getResultList();
        if (ToolUtil.isNotEmpty(serverSuggests1)) {
            count = serverSuggests1.size();
        }
        return count;
    }

    @Override
    public ServerSuggest findById(Integer id) {
        String jpql = "select * from server_suggest ss WHERE ss.id = :id";
        Query query = em.createNativeQuery(jpql);
        query.setParameter("id", id);
        query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(ServerSuggest.class));
        ServerSuggest serverSuggest = (ServerSuggest) query.getSingleResult();
        return serverSuggest;
    }

    @Override
    public ServerSuggest edit(ServerSuggest serverSuggest) {
        ServerSuggest suggest = new ServerSuggest();
        suggest = serverSuggestRepository.save(serverSuggest);
        return suggest;
    }

    @Override
    public List<ServerSuggestAndGiveLikeModel> selectSuggestAll(Integer page, Integer size, String title, Integer type, Integer empDeptId, String empName, Date startTime, Date endTime, Integer status, Integer isDeliver, Integer tabPage, String userId) {
        List<ServerSuggestAndGiveLikeModel> serverSuggestAndGiveLikeModelList = new ArrayList<>();
        try {

            String sql = "select ss.id,ss.server_id as serverId,ss.title,ss.other_describe as otherDescribe,ss.emp_name as empName,ss.emp_id as empId,ss.emp_dept_id as empDeptId,ss.emp_org_id as empOrgId,ss.emp_dept_name as empDeptName,DATE_FORMAT(ss.createtime,'%Y-%m-%d %H:%i:%S') as createtime,ss.status,ss.reply_id as replyId,ss.reply_name as replyName,DATE_FORMAT(ss.reply_time ,'%Y-%m-%d %H:%i:%S') as replyTime,ss.reply_reason as replyReason,ss.type,ss.is_deliver as isDeliver,IF(ss.status='2',(IF(ss.reply_id= :userId,0,1)),0) as isGiveLike,count(s.id) as giveLikeCount,( SELECT gl.STATUS FROM server_give_like gl WHERE gl.user_id = '5422' AND gl.suggestion_id = ss.id ) AS likeStatus FROM server_suggest ss left JOIN server_give_like s ON ss.id = s.suggestion_id and s.status = '1' WHERE 1 =1 ";
            if (tabPage == 1) {
                sql += " and ss.emp_id = :userId ";
            }
            if (tabPage == 2) {
                sql += " and ss.reply_id = :userId ";
            }
            if (tabPage == 3) {
                sql += " and ss.status = '2' ";
            }
            if (ToolUtil.isNotEmpty(title)) {
                sql += " and ss.title like CONCAT('%',:title,'%') ";
            }
            if (ToolUtil.isNotEmpty(type)) {
                sql += " and ss.type = :type ";
            } else if (ToolUtil.isEmpty(type)) {
                sql += " and ss.type in ('1','2','3') ";
            }
            if (ToolUtil.isNotEmpty(empName)) {
                sql += " and ss.emp_name = like CONCAT('%', :empName, '%') ";
            }
            if (ToolUtil.isNotEmpty(empDeptId)) {
                sql += " and ss.emp_dept_id = :empDeptId ";
            }
            if (ToolUtil.isNotEmpty(startTime)) {
                sql += " and ss.createtime >= :startTime ";
            }
            if (ToolUtil.isNotEmpty(endTime)) {
                sql += " and ss.createtime <= :endTime ";
            }
            if (ToolUtil.isNotEmpty(status)) {
                sql += " and ss.status = :status ";
            }
            if (ToolUtil.isNotEmpty(isDeliver)) {
                sql += " and ss.is_deliver = :isDeliver ";
            }
            sql += " GROUP BY ss.id  order by ss.createtime desc ";
            Query query = em.createNativeQuery(sql);
            if (ToolUtil.isNotEmpty(title)) {
                query.setParameter("title", title);
            }
            if (ToolUtil.isNotEmpty(type)) {
                query.setParameter("type", type);
            }
            if (ToolUtil.isNotEmpty(empName)) {
                query.setParameter("empName", empName);
            }
            if (ToolUtil.isNotEmpty(empDeptId)) {
                query.setParameter("empDeptId", empDeptId);
            }
            if (ToolUtil.isNotEmpty(startTime)) {
                query.setParameter("startTime", startTime);
            }
            if (ToolUtil.isNotEmpty(endTime)) {
                query.setParameter("endTime", endTime);
            }
            if (ToolUtil.isNotEmpty(status)) {
                query.setParameter("status", status);
            }
            if (ToolUtil.isNotEmpty(isDeliver)) {
                query.setParameter("isDeliver", isDeliver);
            }
            if (ToolUtil.isNotEmpty(userId)) {
                query.setParameter("userId", userId);
            }

            query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(ServerSuggestAndGiveLikeModel.class));
            query.setFirstResult((page - 1) * size);
            query.setMaxResults(size);
            serverSuggestAndGiveLikeModelList = query.getResultList();
            for (ServerSuggestAndGiveLikeModel serverSuggestAndGiveLikeModel : serverSuggestAndGiveLikeModelList) {
                Integer giveLikeStatus = null;
                if (ToolUtil.isNotEmpty(serverSuggestAndGiveLikeModel.getGiveLikeStatus())) {
                    giveLikeStatus = Integer.parseInt(serverSuggestAndGiveLikeModel.getLikeStatus().toString());
                }
                serverSuggestAndGiveLikeModel.setGiveLikeStatus(giveLikeStatus);
                //根据提交时间和回复时间计算反馈消耗时长
                if (serverSuggestAndGiveLikeModel.getCreatetime() != null && !"".equals(serverSuggestAndGiveLikeModel.getCreatetime()) && serverSuggestAndGiveLikeModel.getReplyTime() != null && !"".equals(serverSuggestAndGiveLikeModel.getReplyTime())) {
                    serverSuggestAndGiveLikeModel.setTimeLength((new SimpleDateFormat("yyyy-MM-dd").parse(serverSuggestAndGiveLikeModel.getReplyTime()).getTime() - new SimpleDateFormat("yyyy-MM-dd").parse(serverSuggestAndGiveLikeModel.getCreatetime()).getTime()) / (1000 * 24 * 60 * 60) + 1 + "天");
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return serverSuggestAndGiveLikeModelList;
    }


    @Override
    public Integer getTotal(String title, Integer type, Integer empDeptId, String empName, Date startTime, Date endTime, Integer status, Integer isDeliver, Integer tabPage, String userId) {
        int total = 0;

        String sql = "select ss.id,ss.server_id as serverId,ss.title,ss.other_describe as otherDescribe,ss.emp_name as empName,ss.emp_id as empId,ss.emp_dept_id as empDeptId,ss.emp_org_id as empOrgId,ss.emp_dept_name as empDeptName,DATE_FORMAT(ss.createtime,'%Y-%m-%d %H:%i:%S') as createtime,ss.status,ss.reply_id as replyId,DATE_FORMAT(ss.reply_time,'%Y-%m-%d %H:%i:%S') as replyTime ,ss.reply_reason as replyReason,ss.type,ss.is_deliver as isDeliver,IF(ss.status='2',(IF(ss.reply_id= :userId,0,1)),0) as isGiveLike,count(s.id) as giveLikeCount,(select gl.`status` from server_give_like gl where gl.user_id = :userId AND gl.suggestion_id= ss.id) as likeStatus FROM server_suggest ss left JOIN server_give_like s ON ss.id = s.suggestion_id and s.status = '1' WHERE 1 =1 ";
        if (tabPage == 1) {
            sql += " and ss.emp_id = :userId ";
        }
        if (tabPage == 2) {
            sql += " and ss.reply_id = :userId ";
        }
        if (tabPage == 3) {
            sql += " and ss.status = '2' ";
        }
        if (ToolUtil.isNotEmpty(title)) {
            sql += " and ss.title like CONCAT('%',:title,'%') ";
        }
        if (ToolUtil.isNotEmpty(type)) {
            sql += " and ss.type = :type ";
        } else if (ToolUtil.isEmpty(type)) {
            sql += " and ss.type in ('1','2','3') ";
        }
        if (ToolUtil.isNotEmpty(empName)) {
            sql += " and ss.emp_name = like CONCAT('%', :empName, '%') ";
        }
        if (ToolUtil.isNotEmpty(empDeptId)) {
            sql += " and ss.emp_dept_id = :empDeptId ";
        }
        if (ToolUtil.isNotEmpty(startTime)) {
            sql += " and ss.createtime >= :startTime ";
        }
        if (ToolUtil.isNotEmpty(endTime)) {
            sql += " and ss.createtime <= :endTime ";
        }
        if (ToolUtil.isNotEmpty(status)) {
            sql += " and ss.status = :status ";
        }
        if (ToolUtil.isNotEmpty(isDeliver)) {
            sql += " and ss.is_deliver = :isDeliver ";
        }
        sql += " GROUP BY ss.id  order by ss.createtime desc ";
        Query query = em.createNativeQuery(sql);
        if (ToolUtil.isNotEmpty(title)) {
            query.setParameter("title", title);
        }
        if (ToolUtil.isNotEmpty(type)) {
            query.setParameter("type", type);
        }
        if (ToolUtil.isNotEmpty(empName)) {
            query.setParameter("empName", empName);
        }
        if (ToolUtil.isNotEmpty(empDeptId)) {
            query.setParameter("empDeptId", empDeptId);
        }
        if (ToolUtil.isNotEmpty(startTime)) {
            query.setParameter("startTime", startTime);
        }
        if (ToolUtil.isNotEmpty(endTime)) {
            query.setParameter("endTime", endTime);
        }
        if (ToolUtil.isNotEmpty(status)) {
            query.setParameter("status", status);
        }
        if (ToolUtil.isNotEmpty(isDeliver)) {
            query.setParameter("isDeliver", isDeliver);
        }
        if (ToolUtil.isNotEmpty(userId)) {
            query.setParameter("userId", userId);
        }

        query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(ServerSuggestAndGiveLikeModel.class));
        List<ServerSuggestAndGiveLikeModel> serverSuggestList = query.getResultList();
        if (ToolUtil.isNotEmpty(serverSuggestList)) {
            total = serverSuggestList.size();
        }
        return total;
    }

    @Override
    public void update(Integer id, String userId) {
        ServerGiveLike serverGiveLike1 = new ServerGiveLike();

        //根据反馈关联id和点赞人id查询点赞情况
        ServerGiveLike serverGiveLike = serverGiveLikeRepository.findAllBySuggestionIdAndUserId(id, userId);
        if (serverGiveLike != null && !"".equals(serverGiveLike)) {
            Integer status = serverGiveLike.getStatus();
            //先判断是否有点赞记录，再判断状态进行点赞操作
//        if (status != null || !"".equals(status)) {
            if (status == 0) {
                serverGiveLike.setStatus(1);
            } else if (status == 1) {
                serverGiveLike.setStatus(0);
            }
            serverGiveLikeRepository.save(serverGiveLike);

        } else if (serverGiveLike == null || "".equals(serverGiveLike)) {
            serverGiveLike1.setSuggestionId(id);
            serverGiveLike1.setUserId(userId);
            serverGiveLike1.setStatus(1);
            serverGiveLike1.setCreateTime(new Date());
            serverGiveLikeRepository.save(serverGiveLike1);
        }
    }

    @Override
    public ServerSuggestAndGiveLikeModel select(Integer id, String userId) {
        ServerSuggestAndGiveLikeModel serverSuggestAndGiveLikeModel = new ServerSuggestAndGiveLikeModel();
        try {

            String sql = "select ss.id,ss.server_id as serverId,ss.title,ss.other_describe as otherDescribe,ss.emp_name as empName,ss.emp_id as empId,ss.emp_dept_id as empDeptId,ss.emp_org_id as empOrgId,ss.emp_dept_name as empDeptName,DATE_FORMAT(ss.createtime,'%Y-%m-%d %H:%i:%S') as createtime,ss.status,ss.reply_id as replyId,ss.reply_name as replyName,DATE_FORMAT(ss.reply_time,'%Y-%m-%d %H:%i:%S') as replyTime,ss.reply_reason as replyReason,ss.type,ss.is_deliver as isDeliver,(IF(ss.status='2',(IF(ss.reply_id= :userId,0,1)),0)) as isLike,count(s.id) as giveLikeCount,(select gl.status from server_give_like gl where gl.user_id = :userId AND gl.suggestion_id= ss.id) as giveLikeStatus FROM server_suggest ss left JOIN server_give_like s ON ss.id = s.suggestion_id and s.status = '1' WHERE ss.id = :id ";
            Query query = em.createNativeQuery(sql);
            if (ToolUtil.isNotEmpty(userId)) {
                query.setParameter("userId", userId);
            }
            if (ToolUtil.isNotEmpty(id)) {
                query.setParameter("id", id);
            }
            query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(ServerSuggestAndGiveLikeModel.class));
            serverSuggestAndGiveLikeModel = (ServerSuggestAndGiveLikeModel) query.getSingleResult();
            Integer isGiveLike = Integer.parseInt(serverSuggestAndGiveLikeModel.getIsLike().toString());
            serverSuggestAndGiveLikeModel.setIsGiveLike(isGiveLike);
            //根据提交时间和回复时间计算反馈消耗时长
            serverSuggestAndGiveLikeModel.setTimeLength((new SimpleDateFormat("yyyy-MM-dd").parse(serverSuggestAndGiveLikeModel.getReplyTime()).getTime() - new SimpleDateFormat("yyyy-MM-dd").parse(serverSuggestAndGiveLikeModel.getCreatetime()).getTime()) / (1000 * 24 * 60 * 60) + 1 + "天");
        } catch (Exception e) {
//            e.printStackTrace();
        }
        return serverSuggestAndGiveLikeModel;
    }

    @Override
    public ServerSuggest findAllById(Integer id) {
        ServerSuggest serverSuggest = serverSuggestRepository.findServerSuggestById(id);
        return serverSuggest;
    }

    @Override
    public ServerSuggestModel selectComplaint(Integer id) {
        ServerSuggestModel serverSuggestModel = new ServerSuggestModel();
        try {
            String sql = " select ss.id,ss.server_id as serverId,ss.title,ss.other_describe as otherDescribe,ss.emp_name as empName,ss.emp_id as empId,ss.emp_dept_id as empDeptId,ss.emp_org_id as empOrgId,ss.emp_dept_name as empDeptName,DATE_FORMAT(ss.createtime,'%Y-%m-%d %H:%i:%S') as createtime,ss.status,ss.reply_id as replyId,ss.reply_name as replyName,DATE_FORMAT(ss.reply_time,'%Y-%m-%d %H:%i:%S') as replyTime,ss.reply_reason as replyReason,ss.type,ss.is_deliver as isDeliver,ss.is_anonymous as isAnonymous,ss.complaint_dept_id as complaintDeptId,ss.complaint_dept_name as complaintDeptName from server_suggest ss where ss.id = :id ";
            Query query = em.createNativeQuery(sql);
            if (ToolUtil.isNotEmpty(id)) {
                query.setParameter("id", id);
            }
            query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(ServerSuggestModel.class));
            serverSuggestModel = (ServerSuggestModel) query.getSingleResult();
//            serverSuggestModel = serverSuggestRepository.findComplaintById(id);
            if (serverSuggestModel.getIsAnonymous() == 1) {
                serverSuggestModel.setEmpName("匿名");
            }
            //根据提交时间和回复时间计算反馈消耗时长
            serverSuggestModel.setTimeLength((new SimpleDateFormat("yyyy-MM-dd").parse(serverSuggestModel.getReplyTime()).getTime() - new SimpleDateFormat("yyyy-MM-dd").parse(serverSuggestModel.getCreatetime()).getTime()) / (1000 * 24 * 60 * 60) + 1 + "天");
        } catch (Exception e) {
//            e.printStackTrace();
        }
        return serverSuggestModel;
    }

    @Override
    public List<ServerSuggestModel> selectComplaintAll(Integer page, Integer size, String title, Integer type, Integer empDeptId, String empName, Date startTime, Date endTime, Integer status, Integer isDeliver, Integer tabPage, String userId) {
        List<ServerSuggestModel> serverSuggestModelList = new ArrayList<>();
        try {

            String sql = "select ss.id,ss.server_id as serverId,ss.title,ss.other_describe as otherDescribe,ss.emp_name as empName,ss.emp_id as empId,ss.emp_dept_id as empDeptId,ss.emp_org_id as empOrgId,ss.emp_dept_name as empDeptName,DATE_FORMAT(ss.createtime,'%Y-%m-%d %H:%i:%S') createtime,ss.status,ss.reply_id as replyId,ss.reply_name as replyName,DATE_FORMAT(ss.reply_time,'%Y-%m-%d %H:%i:%S') replyTime,ss.reply_reason as replyReason,ss.type,ss.is_deliver as isDeliver,ss.is_anonymous as isAnonymous,ss.complaint_dept_id as complaintDeptId,ss.complaint_dept_name as complaintDeptName FROM server_suggest ss WHERE 1 =1 ";
            if (tabPage == 1) {
                sql += " and ss.emp_id = :userId ";
            }
            if (tabPage == 2) {
                sql += " and ss.reply_id = :userId ";
            }
            if (tabPage == 3) {
                sql += " and ss.status = '2' ";
            }
            if (ToolUtil.isNotEmpty(title)) {
                sql += " and ss.title like CONCAT('%',:title,'%') ";
            }
            if (ToolUtil.isNotEmpty(type)) {
                sql += " and ss.type = :type ";
            } else if (ToolUtil.isEmpty(type)) {
                sql += " and ss.type in ('4','5') ";
            }
            if (ToolUtil.isNotEmpty(empName)) {
                sql += " and ss.emp_name like CONCAT('%', :empName, '%') ";
            }
            if (ToolUtil.isNotEmpty(empDeptId)) {
                sql += " and ss.emp_dept_id = :empDeptId ";
            }

            if (ToolUtil.isNotEmpty(startTime)) {
                sql += " and ss.createtime >= :startTime ";
            }
            if (ToolUtil.isNotEmpty(endTime)) {
                sql += " and ss.createtime <= :endTime ";
            }
            if (ToolUtil.isNotEmpty(status)) {
                sql += " and ss.status = :status ";
            }
            if (ToolUtil.isNotEmpty(isDeliver)) {
                sql += " and ss.is_deliver = :isDeliver ";
            }
            sql += "  order by ss.createtime desc ";
            Query query = em.createNativeQuery(sql);
            if (ToolUtil.isNotEmpty(title)) {
                query.setParameter("title", title);
            }
            if (ToolUtil.isNotEmpty(type)) {
                query.setParameter("type", type);
            }
            if (ToolUtil.isNotEmpty(empName)) {
                query.setParameter("empName", empName);
            }
            if (ToolUtil.isNotEmpty(empDeptId)) {
                query.setParameter("empDeptId", empDeptId);
            }
            if (ToolUtil.isNotEmpty(startTime)) {
                query.setParameter("startTime", startTime);
            }
            if (ToolUtil.isNotEmpty(endTime)) {
                query.setParameter("endTime", endTime);
            }
            if (ToolUtil.isNotEmpty(status)) {
                query.setParameter("status", status);
            }
            if (ToolUtil.isNotEmpty(isDeliver)) {
                query.setParameter("isDeliver", isDeliver);
            }
            if (ToolUtil.isNotEmpty(userId)) {
                query.setParameter("userId", userId);
            }

            query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(ServerSuggestModel.class));
            query.setFirstResult((page - 1) * size);
            query.setMaxResults(size);
            serverSuggestModelList = query.getResultList();
            for (ServerSuggestModel serverSuggestModel : serverSuggestModelList) {
                if (serverSuggestModel.getIsAnonymous() == 1) {
                    serverSuggestModel.setEmpName("匿名");
                }
                if (ToolUtil.isNotEmpty(serverSuggestModel.getReplyTime())){
                    serverSuggestModel.setTimeLength((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(serverSuggestModel.getReplyTime()).getTime() - new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(serverSuggestModel.getCreatetime()).getTime()) / (1000 * 24 * 60 * 60) + 1 + "天");
                }else {
                    serverSuggestModel.setTimeLength("0天");
                }
                //根据提交时间和回复时间计算反馈消耗时长
            }

        } catch (Exception e) {
              e.printStackTrace();
        }
        return serverSuggestModelList;
    }

    @Override
    public Integer getCountTotal(String title, Integer type, Integer empDeptId, String empName, Date startTime, Date endTime, Integer status, Integer isDeliver, Integer tabPage, String userId) {
        int total = 0;

        String sql = "select ss.id,ss.server_id as serverId,ss.title,ss.other_describe as otherDescribe,ss.emp_name as empName,ss.emp_id as empId,ss.emp_dept_id as empDeptId,ss.emp_org_id as empOrgId,ss.emp_dept_name as empDeptName,DATE_FORMAT(ss.createtime,'%Y-%m-%d %H:%i:%S') createtime,ss.status,ss.reply_id as replyId,ss.reply_name as replyName,DATE_FORMAT(ss.reply_time,'%Y-%m-%d %H:%i:%S') replyTime,ss.reply_reason as replyReason,ss.type,ss.is_deliver as isDeliver,ss.is_anonymous as isAnonymous,ss.complaint_dept_id as complaintDeptId,ss.complaint_dept_name as complaintDeptName FROM server_suggest ss WHERE 1 =1 ";
        if (tabPage == 1) {
            sql += " and ss.emp_id = :userId ";
        }
        if (tabPage == 2) {
            sql += " and ss.reply_id = :userId ";
        }
        if (tabPage == 3) {
            sql += " and ss.status = '2' ";
        }
        if (ToolUtil.isNotEmpty(title)) {
            sql += " and ss.title like CONCAT('%',:title,'%') ";
        }
        if (ToolUtil.isNotEmpty(type)) {
            sql += " and ss.type = :type ";
        } else if (ToolUtil.isEmpty(type)) {
            sql += " and ss.type in ('4','5') ";
        }
        if (ToolUtil.isNotEmpty(empName)) {
            sql += " and ss.emp_name = :empName ";
        }
        if (ToolUtil.isNotEmpty(empDeptId)) {
            sql += " and ss.emp_dept_id = :empDeptId ";
        }
        if (ToolUtil.isNotEmpty(startTime)) {
            sql += " and ss.createtime >= :startTime ";
        }
        if (ToolUtil.isNotEmpty(endTime)) {
            sql += " and ss.createtime <= :endTime ";
        }
        if (ToolUtil.isNotEmpty(status)) {
            sql += " and ss.status = :status ";
        }
        if (ToolUtil.isNotEmpty(isDeliver)) {
            sql += " and ss.is_deliver = :idDeliver ";
        }
        sql += " order by ss.createtime desc ";
        Query query = em.createNativeQuery(sql);
        if (ToolUtil.isNotEmpty(title)) {
            query.setParameter("title", title);
        }
        if (ToolUtil.isNotEmpty(type)) {
            query.setParameter("type", type);
        }
        if (ToolUtil.isNotEmpty(empName)) {
            query.setParameter("empName", empName);
        }
        if (ToolUtil.isNotEmpty(empDeptId)) {
            query.setParameter("empDeptId", empDeptId);
        }
        if (ToolUtil.isNotEmpty(startTime)) {
            query.setParameter("startTime", startTime);
        }
        if (ToolUtil.isNotEmpty(endTime)) {
            query.setParameter("endTime", endTime);
        }
        if (ToolUtil.isNotEmpty(status)) {
            query.setParameter("status", status);
        }
        if (ToolUtil.isNotEmpty(isDeliver)) {
            query.setParameter("isDeliver", isDeliver);
        }
        if (ToolUtil.isNotEmpty(userId)) {
            query.setParameter("userId", userId);
        }

        query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(ServerSuggestModel.class));
        List<ServerSuggestModel> serverSuggestList = query.getResultList();
        if (ToolUtil.isNotEmpty(serverSuggestList)) {
            total = serverSuggestList.size();
        }
        return total;
    }


    /**
     * 查询投诉总数
     *
     * @param beginTime 开始时间
     * @param endTime   结束时间
     * @return
     */
    public int getComplaintTotal(String beginTime, String endTime) {
        int total = 0;
        String sql = "SELECT COUNT(*) FROM server_suggest WHERE type= '4' OR type= '5' and createtime >=:beginTime and createtime <=:endTime";
        Query query = em.createNativeQuery(sql);
        query.setParameter("beginTime", beginTime);
        query.setParameter("endTime", endTime);
        List<BigInteger> counts = query.getResultList();
        if (counts != null && counts.size() > 0) {
            total = counts.get(0).intValue();
        }
        return total;
    }

    @Override
    public List<SuggestModel> find(Integer empDeptId, String empDeptName, Integer status, Integer type, Integer isDeliver) {

        String sql = "select ss.title,ss.other_describe as otherDescribe,(case ss.type when 1 then '服务需求' when 2 then '服务反馈' when 3 then '服务意见' end ) as type,ss.emp_name as empName,ss.emp_dept_name as empDeptName,DATE_FORMAT(ss.createtime,'%Y-%m-%d') as createtime,ss.reply_name as replyName,(case ss.status when 0 then '未处理' when 1 then '已处理' end ) as status FROM server_suggest ss WHERE 1=1 ";

        if (ToolUtil.isNotEmpty(type)) {
            sql += " and ss.type = :type ";
        } else if (ToolUtil.isEmpty(type)) {
            sql += " and ss.type in ('1','2','3') ";
        }
        if (ToolUtil.isNotEmpty(empDeptId)) {
            sql += " and ss.emp_dept_id = :empDeptId ";
        }
        if (ToolUtil.isNotEmpty(status)) {
            sql += " and ss.status = :status ";
        }
        if (ToolUtil.isNotEmpty(isDeliver)) {
            sql += " and ss.is_deliver = :isDeliver ";
        }
        sql += " order by ss.createtime desc ";
        Query query = em.createNativeQuery(sql);
        if (ToolUtil.isNotEmpty(type)) {
            query.setParameter("type", type);
        }
        if (ToolUtil.isNotEmpty(empDeptId)) {
            query.setParameter("empDeptId", empDeptId);
        }
        if (ToolUtil.isNotEmpty(status)) {
            query.setParameter("status", status);
        }
        if (ToolUtil.isNotEmpty(isDeliver)) {
            query.setParameter("isDeliver", isDeliver);
        }

        query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(SuggestModel.class));

        return query.getResultList();
    }

    @Override
    public List<ComplaintModel> getComplaint(Integer empDeptId, String empDeptName, Integer status, Integer type, Integer isDeliver) {
        String sql = "select ss.title,ss.other_describe as otherDescribe,(case ss.type when 4 then '部门投诉' when 5 then '服务投诉' end ) as type,ss.emp_name as empName,ss.emp_dept_name as empDeptName,DATE_FORMAT(ss.createtime,'%Y-%m-%d') as createtime,ss.reply_name as replyName,(case ss.status when 0 then '未处理' when 1 then '已处理' end ) as status,ss.is_anonymous as isAnonymous FROM server_suggest ss WHERE 1=1 ";

        if (ToolUtil.isNotEmpty(type)) {
            sql += " and ss.type = :type ";
        } else if (ToolUtil.isEmpty(type)) {
            sql += " and ss.type in ('4','5') ";
        }
        if (ToolUtil.isNotEmpty(empDeptId)) {
            sql += " and ss.emp_dept_id = :empDeptId ";
        }
        if (ToolUtil.isNotEmpty(status)) {
            sql += " and ss.status = :status ";
        }
        if (ToolUtil.isNotEmpty(isDeliver)) {
            sql += " and ss.is_deliver = :isDeliver ";
        }
        sql += " order by ss.createtime desc ";
        Query query = em.createNativeQuery(sql);
        if (ToolUtil.isNotEmpty(type)) {
            query.setParameter("type", type);
        }
        if (ToolUtil.isNotEmpty(empDeptId)) {
            query.setParameter("empDeptId", empDeptId);
        }
        if (ToolUtil.isNotEmpty(status)) {
            query.setParameter("status", status);
        }
        if (ToolUtil.isNotEmpty(isDeliver)) {
            query.setParameter("isDeliver", isDeliver);
        }

        query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.aliasToBean(ComplaintModel.class));
        List<ComplaintModel> list = query.getResultList();
        for (ComplaintModel complaintModel : list) {
            if (complaintModel.getIsAnonymous() == 1) {
                complaintModel.setEmpName("匿名");
            }
        }
        return list;
    }


}
